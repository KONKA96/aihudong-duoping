<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dao.StudentMapper" >
  <resultMap id="BaseResultMap" type="com.model.Student" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="truename" property="truename" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="INTEGER" />
    <result column="telephone" property="telephone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="subject_id" property="subjectId" jdbcType="INTEGER" />
    <result column="duration" property="duration" jdbcType="VARCHAR" />
    <result column="time" property="time" jdbcType="INTEGER" />
    <result column="remake" property="remake" jdbcType="VARCHAR" />
    <result column="group_id" property="groupId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, username, password, truename, nickname, sex, telephone, email, subject_id, duration, 
    time, remake, group_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from student
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from student
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.model.Student" >
    insert into student (id, username, password, 
      truename, nickname, sex, 
      telephone, email, subject_id, 
      duration, time, remake, 
      group_id)
    values (#{id,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{truename,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, #{sex,jdbcType=INTEGER}, 
      #{telephone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{subjectId,jdbcType=INTEGER}, 
      #{duration,jdbcType=VARCHAR}, #{time,jdbcType=INTEGER}, #{remake,jdbcType=VARCHAR}, 
      #{groupId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.model.Student" >
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="truename != null" >
        truename,
      </if>
      <if test="nickname != null" >
        nickname,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="telephone != null" >
        telephone,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="subjectId != null" >
        subject_id,
      </if>
      <if test="duration != null" >
        duration,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="remake != null" >
        remake,
      </if>
      <if test="groupId != null" >
        group_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="truename != null" >
        #{truename,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="telephone != null" >
        #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="subjectId != null" >
        #{subjectId,jdbcType=INTEGER},
      </if>
      <if test="duration != null" >
        #{duration,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        #{time,jdbcType=INTEGER},
      </if>
      <if test="remake != null" >
        #{remake,jdbcType=VARCHAR},
      </if>
      <if test="groupId != null" >
        #{groupId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.model.Student" >
    update student
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="truename != null" >
        truename = #{truename,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="telephone != null" >
        telephone = #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="subjectId != null" >
        subject_id = #{subjectId,jdbcType=INTEGER},
      </if>
      <if test="duration != null" >
        duration = #{duration,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=INTEGER},
      </if>
      <if test="remake != null" >
        remake = #{remake,jdbcType=VARCHAR},
      </if>
      <if test="groupId != null" >
        group_id = #{groupId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.model.Student" >
    update student
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      truename = #{truename,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      telephone = #{telephone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      subject_id = #{subjectId,jdbcType=INTEGER},
      duration = #{duration,jdbcType=VARCHAR},
      time = #{time,jdbcType=INTEGER},
      remake = #{remake,jdbcType=VARCHAR},
      group_id = #{groupId,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  <resultMap type="Student" id="studentMap" autoMapping="true">
  	<id column="stu_id" property="id"/>
  	<association property="subject" javaType="Subject" autoMapping="true">
  		<id column="sub_id" property="id"/>
  		<result column="sub_desc" property="desc"/>
  	</association>
  	<association property="group" javaType="Group" autoMapping="true">
  		<id column="g_id" property="id"/>
  		<result column="g_desc" property="desc"/>
  	</association>
  </resultMap>
  <select id="studentLogin" parameterType="Student" resultMap="studentMap">
  	select   
  		stu.id stu_id, stu.username, stu.password, stu.truename, stu.nickname,
  		stu.sex, stu.telephone, stu.email, stu.subject_id, stu.duration, stu.time, stu.remake, stu.group_id,
  		sub.id sub_id, sub.subject_name, sub.faculty_id, sub.desc sub_desc,
  		g.id g_id, g.name, g.desc g_desc
  	from student stu left join subject sub on stu.subject_id=sub.id
  	left join `group` g on stu.group_id=g.id
  	<where>
  		and username=#{username} and password=#{password}
  	</where>
  </select>
  
  
  
  <resultMap type="Student" id="studentSubjectFacultyMap" autoMapping="true">
  	<id column="stu_id" property="id"/>
  	<association property="subject" javaType="Subject" autoMapping="true">
  		<id column="s_id" property="id"/>
  		<association property="faculty" javaType="Faculty" autoMapping="true">
  			<id column="f_id" property="id"/>
  		</association>
  	</association>
  </resultMap>
  
  <sql id="selectstudent">
  	select
 		stu.id stu_id, stu.username, stu.password, stu.truename, stu.nickname,stu.sex, 
 		stu.telephone, stu.email, stu.subject_id, stu.duration, stu.time, stu.remake, stu.group_id,
  		s.id s_id,s.subject_name,
  		f.id f_id,f.faculty_name
  	from student stu left join subject s on stu.subject_id=s.id
  	left join faculty f on s.faculty_id=f.id
  </sql>
 <select id="selectAllStudent" resultMap="studentSubjectFacultyMap" parameterType="Student">
 	<include refid="selectstudent"/>
  	<where>
  		<if test="id!=null and id!=''">
  			and stu.id=#{id}
  		</if>
  		<if test="username!='' and username!=null">
  			and concat (stu.username,stu.truename,s.subject_name,f.faculty_name) like concat ('%',#{username},'%')  	
  		</if>
  		<if test="subjectId!=null">
  			stu.subject_id=#{subjectId}
  		</if>
  		
  	</where>
 </select>
 
 
 <select id="selectStudentByFaculty" parameterType="java.util.Map" resultMap="studentSubjectFacultyMap">
  	<include refid="selectstudent"/>
  	<where>
  		<if test="facultyId!='' and facultyId!=null">
  			and f.id=#{facultyId}
  		</if>
  		<if test="username!='' and username!=null">
  			and concat (stu.username,stu.truename,s.subject_name,f.faculty_name) like concat ('%',#{username},'%')  	
  		</if>
  	</where>
  </select>
 
 <select id="selectAllId" resultType="java.lang.String">
 	select id from student
 </select>
 
 <select id="selectStudentByUsername" parameterType="Student" resultType="Student">
 	select
 	<include refid="Base_Column_List"/>
 	from student
 	<where>
 		username=#{username}
 	</where>
 </select>
</mapper>